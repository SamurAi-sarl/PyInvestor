{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyInvestor PyInvestor is a python wrapper for the IEX API. Features As of now, PyInvestor is a wrapper for the IEX API. However, we have the ambition to grow it and integrate several financial APIs into one single Python library, PyInvestor . Dependencies Pandas Requests Installation pip install pyinvestor Example Market SectorPerformance from PyInvestor import market market.SectorPerformance() Stock Todos","title":"Home"},{"location":"#pyinvestor","text":"PyInvestor is a python wrapper for the IEX API.","title":"PyInvestor"},{"location":"#features","text":"As of now, PyInvestor is a wrapper for the IEX API. However, we have the ambition to grow it and integrate several financial APIs into one single Python library, PyInvestor .","title":"Features"},{"location":"#dependencies","text":"Pandas Requests","title":"Dependencies"},{"location":"#installation","text":"pip install pyinvestor","title":"Installation"},{"location":"#example","text":"","title":"Example"},{"location":"#market","text":"SectorPerformance from PyInvestor import market market.SectorPerformance()","title":"Market"},{"location":"#stock","text":"","title":"Stock"},{"location":"#todos","text":"","title":"Todos"},{"location":"market/","text":"Market methods These are the different methods that are already implemented in the library PyInvestor at the market level. Crypto Aim This will return an array of quotes for all Cryptocurrencies supported by the IEX API. Example from PyInvestor import market market.Crypto() UpcomingIPO Aim This returns a list of upcoming IPOs scheduled for the current and next month. Example from PyInvestor import market market.UpcomingIPO() TodayIPO Aim This returns a list of today's IPOs scheduled for the current and next month. Example from PyInvestor import market market.TodayIPO() Gainers Aim List of stocks that got the best performances in percent. Example from PyInvestor import market market.Gainers() Losers Aim List of stocks that got the worst performances in percent. Example from PyInvestor import market market.Losers() MostActive Aim 10 most active quotes Example from PyInvestor import market market.MostActive() InFocus Aim 10 quotes in focus Example from PyInvestor import market market.InFocus() NewsMarket Aim Get market-wide news. Example from PyInvestor import market market.NewsMarket() MarketOHLC Aim Returns the official open and close for symbols. Example from PyInvestor import market market.MarketOHLC() Previous Aim Returns previous day an object keyed symbol of price data for the whole market. Example from PyInvestor import market market.Previous() SectorPerformance Aim Returns an array of each sector and performance for the current trading day. Example from PyInvestor import market market.SectorPerformance()","title":"Market"},{"location":"market/#market-methods","text":"These are the different methods that are already implemented in the library PyInvestor at the market level.","title":"Market methods"},{"location":"market/#crypto","text":"Aim This will return an array of quotes for all Cryptocurrencies supported by the IEX API. Example from PyInvestor import market market.Crypto()","title":"Crypto"},{"location":"market/#upcomingipo","text":"Aim This returns a list of upcoming IPOs scheduled for the current and next month. Example from PyInvestor import market market.UpcomingIPO()","title":"UpcomingIPO"},{"location":"market/#todayipo","text":"Aim This returns a list of today's IPOs scheduled for the current and next month. Example from PyInvestor import market market.TodayIPO()","title":"TodayIPO"},{"location":"market/#gainers","text":"Aim List of stocks that got the best performances in percent. Example from PyInvestor import market market.Gainers()","title":"Gainers"},{"location":"market/#losers","text":"Aim List of stocks that got the worst performances in percent. Example from PyInvestor import market market.Losers()","title":"Losers"},{"location":"market/#mostactive","text":"Aim 10 most active quotes Example from PyInvestor import market market.MostActive()","title":"MostActive"},{"location":"market/#infocus","text":"Aim 10 quotes in focus Example from PyInvestor import market market.InFocus()","title":"InFocus"},{"location":"market/#newsmarket","text":"Aim Get market-wide news. Example from PyInvestor import market market.NewsMarket()","title":"NewsMarket"},{"location":"market/#marketohlc","text":"Aim Returns the official open and close for symbols. Example from PyInvestor import market market.MarketOHLC()","title":"MarketOHLC"},{"location":"market/#previous","text":"Aim Returns previous day an object keyed symbol of price data for the whole market. Example from PyInvestor import market market.Previous()","title":"Previous"},{"location":"market/#sectorperformance","text":"Aim Returns an array of each sector and performance for the current trading day. Example from PyInvestor import market market.SectorPerformance()","title":"SectorPerformance"},{"location":"stock/","text":"Stock methods These are the different methods that are already implemented in the library PyInvestor at the stock level. Company Aim Returns information related to the company Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Company() DelayedQuote Aim Returns 15 minute delayed market quote Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.DelayedQuote() Dividends Aim Returns the historical dividends based on on the historical market data Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Dividends() Option timerange: value in [\"5y\", \"2y\", \"1y\", \"ytd\", \"6m\", \"3m\", \"1m\"] Earnings Aim Returns data from the four most recent reported quarters Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Earnings() EffectiveSpread Aim Returns an array of effective spread, eligible volume, and prive improvement of a stock, by market. Effective spread is designed to measure marketable orders executable in relation to the market center's quoted spread and takes into account hidden and midpoint liquidity available at each market center. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.EffectiveSpread() Financials Aim Returns income statement, balance sheet, and cash flow data from the four most recent reported quarters. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Financials() Stats Aim Returns certain important numbers in relation with a stock. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Stats() LargestTrades Aim Returns 15 min delayed, last sale eligible trades Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.LargestTrades() News Aim Returns stock related news for a certain number of last days. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.News(lastndays=5) Options lastndays: value betwen 1 and 50 OHLC Aim Returns the official open, high, low and close for a given symbol with open and/or close official listing time Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.OHLC() Previous Aim Returns previous day adjusted price data for a single stock Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Previous() Price Aim Returns a single number, corresponding to the IEX real time price, the 15 minute delayed market price, or the previous close price. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Price() Quote Aim Returns several quoting prices such as calculationPrice, latestPrice, delayedPrice. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Quote() Option displayPercent: all percentage values will be multiplied by a factor 100 Relevant Aim This will return the most active market symbols. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Relevant() Splits Aim Returns the different splits that occured for a particular range of dates \"timerange\" Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Splits(timerange = '1m') Option timerange: value in [\"5y\", \"2y\", \"1y\", \"ytd\", \"6m\", \"3m\", \"1m\"] Tags Aim Get the tags related to a particular stock Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Tags() TimeSeries Aim Returns the historically adjusted market-wide data based on the timerange. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.TimeSeries() Option timerange: value in [\"5y\", \"2y\", \"1y\", \"ytd\", \"6m\", \"3m\", \"1m\"] VolumebyVenue Aim Returns 15 min delayed and 30 day average consolidation volume percentage of a stock, by market. This call will always return 13 values, and will be sorted in ascending order by current day trading volume percentage. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.VolumebyVenue()","title":"Stock"},{"location":"stock/#stock-methods","text":"These are the different methods that are already implemented in the library PyInvestor at the stock level.","title":"Stock methods"},{"location":"stock/#company","text":"Aim Returns information related to the company Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Company()","title":"Company"},{"location":"stock/#delayedquote","text":"Aim Returns 15 minute delayed market quote Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.DelayedQuote()","title":"DelayedQuote"},{"location":"stock/#dividends","text":"Aim Returns the historical dividends based on on the historical market data Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Dividends() Option timerange: value in [\"5y\", \"2y\", \"1y\", \"ytd\", \"6m\", \"3m\", \"1m\"]","title":"Dividends"},{"location":"stock/#earnings","text":"Aim Returns data from the four most recent reported quarters Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Earnings()","title":"Earnings"},{"location":"stock/#effectivespread","text":"Aim Returns an array of effective spread, eligible volume, and prive improvement of a stock, by market. Effective spread is designed to measure marketable orders executable in relation to the market center's quoted spread and takes into account hidden and midpoint liquidity available at each market center. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.EffectiveSpread()","title":"EffectiveSpread"},{"location":"stock/#financials","text":"Aim Returns income statement, balance sheet, and cash flow data from the four most recent reported quarters. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Financials()","title":"Financials"},{"location":"stock/#stats","text":"Aim Returns certain important numbers in relation with a stock. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Stats()","title":"Stats"},{"location":"stock/#largesttrades","text":"Aim Returns 15 min delayed, last sale eligible trades Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.LargestTrades()","title":"LargestTrades"},{"location":"stock/#news","text":"Aim Returns stock related news for a certain number of last days. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.News(lastndays=5) Options lastndays: value betwen 1 and 50","title":"News"},{"location":"stock/#ohlc","text":"Aim Returns the official open, high, low and close for a given symbol with open and/or close official listing time Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.OHLC()","title":"OHLC"},{"location":"stock/#previous","text":"Aim Returns previous day adjusted price data for a single stock Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Previous()","title":"Previous"},{"location":"stock/#price","text":"Aim Returns a single number, corresponding to the IEX real time price, the 15 minute delayed market price, or the previous close price. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Price()","title":"Price"},{"location":"stock/#quote","text":"Aim Returns several quoting prices such as calculationPrice, latestPrice, delayedPrice. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Quote() Option displayPercent: all percentage values will be multiplied by a factor 100","title":"Quote"},{"location":"stock/#relevant","text":"Aim This will return the most active market symbols. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Relevant()","title":"Relevant"},{"location":"stock/#splits","text":"Aim Returns the different splits that occured for a particular range of dates \"timerange\" Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Splits(timerange = '1m') Option timerange: value in [\"5y\", \"2y\", \"1y\", \"ytd\", \"6m\", \"3m\", \"1m\"]","title":"Splits"},{"location":"stock/#tags","text":"Aim Get the tags related to a particular stock Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.Tags()","title":"Tags"},{"location":"stock/#timeseries","text":"Aim Returns the historically adjusted market-wide data based on the timerange. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.TimeSeries() Option timerange: value in [\"5y\", \"2y\", \"1y\", \"ytd\", \"6m\", \"3m\", \"1m\"]","title":"TimeSeries"},{"location":"stock/#volumebyvenue","text":"Aim Returns 15 min delayed and 30 day average consolidation volume percentage of a stock, by market. This call will always return 13 values, and will be sorted in ascending order by current day trading volume percentage. Example from PyInvestor.stock import Stock AMZN = Stock('AMZN') AMZN.VolumebyVenue()","title":"VolumebyVenue"}]}